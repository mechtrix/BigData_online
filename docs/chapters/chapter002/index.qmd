---
title: "Data Sources"
bibliography: https://api.citedrive.com/bib/da291eae-8e2a-46b1-968e-0b79af55f87a/references.bib?x=eyJpZCI6ICJkYTI5MWVhZS04ZTJhLTQ2YjEtOTY4ZS0wYjc5YWY1NWY4N2EiLCAidXNlciI6ICI1NjQ5IiwgInNpZ25hdHVyZSI6ICI2ZDMyODMxM2QzZDQ3NmE3MGM4MDc5MzJiNzE1NjkzNjJmYmZjODYyNGMzNmJjNDBkMDk3Njk5N2RmZjQ5MTg5In0=/bibliography.bib
format:
  revealjs:
    slide-level: 5
    resource-path: 
      - "img"
    logo: img/back.svg
    footer-logo-link: "https://mechtrix.github.io/BigData_online/"
    footer: "Copyright Prof. Dr. Tim Weber, 2024"
revealjs-plugins:
  - animate
  - attribution
filters: 
  - animate
  - reveal-header
editor_options: 
  chunk_output_type: console
css: style.css
---


```{r}
#| label: setup
#| include: false

library(tidyverse)
library(ggthemes)
library(here)

```

# Data Sources

![](img/word-cloud.png){fig-align="center"}


## Which do you want?

```{r}
#| fig-asp: 0.55
#| 
sources <- data.frame(
  Source = c("Databases", "API", "Distributed\nStorage", "File\nSystem", 
             "Data\nStreaming", "Log\nFiles", "Sensors\nand\nIoT Devices", "Web\nScraping"),
  Structured_Data = c(8, 7, 7, 6, 6, 5, 4, 3),
  Accessibility = c(8, 7, 6, 7, 6, 6, 5, 4),
  Balance = c(8, 7, 6.5, 6.5, 6, 5.5, 4.5, 3.5)
)

sources %>% 
  ggplot(
    aes(
      x = Structured_Data,
      y = Accessibility,
      label = Source
    )
  )+
  geom_label()+
  scale_x_continuous(
    limits = c(2.5,8.5),
    labels = NULL
  )+
  scale_y_continuous(
    limits = c(3.5,8.5),
    labels = NULL
  )+
  labs(
    title = "Data Sources",
    x = "Structure",
    y = "Accessibility"
  )+
  coord_equal()+
  theme_minimal(base_size = 15)+
  theme(
    axis.line = 
      element_line(
        arrow = arrow(
          type = "closed",
          angle = 15
        ),
        linewidth = 1.5
        ),
    panel.grid = element_blank(),
    # text = element_text(family = "Bahnschrift")
  )
```


## Databases

![](img/excel_db.webp){fig-align="center"}

### Overview {.smaller}

:::: {.columns}

::: {.column width="45%"}
RDBMS:

* Organizes data into tables with predefined schemas.
* Uses SQL for querying and manipulation.
* Ensures data integrity through constraints and normalization.
* Traditionally scales vertically, though can scale horizontally with features like sharding and replication.

:::

::: {.column width="45%"}
NoSQL:

* Diverse data models, including document, key-value, column-family, and graph.
* Offers flexible schemas or schema-less design.
* Optimized for horizontal scalability, handling large volumes of unstructured data.
* Uses various query languages, often tailored to specific data models.

:::

::::

### RDBMS

![](img/rdbms.svg){fig-align="center"}

### NoSQL {.smaller}

```

{
   "_id": 1,
   "customer": "A"
   "production_line": ["1000"],
   "machine_nr": ["1","2","3"],
   "machine_type": ["SolderReflow","SolderReflow","SolderWave"],
   "plant": "1",
   "product": ["ToyRobot"]
}

{
   "_id": 2,
   "customer": "B"
   "production_line": ["2000"],
   "machine_nr": ["1"],
   "machine_type": ["SolderReflow"],
   "plant": "2",
   "product": ["Car"]
}

```

### Databases Summary

Pros:

* highly structured
* highly accessible

Cons:

* difficult to setup (at scale)
* difficult to interface

### File Systems

* FAT32: Common for USB drives, compatible with many systems.
* NTFS: Windows file system, supports encryption and permissions.
* ext4: Linux default, offers better performance.
* HFS+: macOS system with journaling and encryption.
* APFS: Optimized for Apple's flash storage, with snapshots.
* exFAT: Microsoft's format for large files, works on Windows and macOS.
* ZFS: Known for data integrity, used in enterprise storage.

#### File System as a User

![](img/winfs.svg){fig-align="center"}

### File System Summary

Pros:

* highly accessible
* semi structured

Cons:

* often only available on local machine
* rules are there to be broken

### Application Programming Interface (API)

- APIs enable software applications to communicate and share data.
- They define rules for accessing functionalities.
- APIs provide endpoints and methods for developers to interact with.

#### How an API call looks


```
>> res = GET("https://api.open-notify.org/astros.json")
>> res
Response [https://api.open-notify.org/astros.json]
  Date: 2020-01-30 18:07
  Status: 200
  Content-Type: application/json
  Size: 314 B
  

```
#### key-value pairs

```
{
    “name”: “Jane Doe”,
    “number_of_skills”: 2
}

```

#### JSON

<https://www.json.org/json-en.html>

[![JSON for the win](https://www.json.org/img/json160.gif)](https://https://www.json.org/json-en.html)

```
[1] "{\"people\": [{\"name\": \"Christina Koch\", \"craft\": \"ISS\"}, {\"name\": \"Alexander Skvortsov\", \"craft\": \"ISS\"}, {\"name\": \"Luca Parmitano\", \"craft\": \"ISS\"}, {\"name\": \"Andrew Morgan\", \"craft\": \"ISS\"}, {\"name\": \"Oleg Skripochka\", \"craft\": \"ISS\"}, {\"name\": \"Jessica Meir\", \"craft\": \"ISS\"}], \"number\": 6, \"message\": \"success\"}"

```

### API Summary

Pros:

* interoperability
* efficiency
* JSON

Cons:

* must be provided
* security
* JSON


### Distributed Storage 

  * Hadoop 
  * Cloud (Amazon S3, Google, Azure)
  * Data warehouse (Redshift, Google Big Query, Snowflake)
  
#### The Cloud

![](img/the_cloud.png)

::: {.attribution}
[xkcd](https://xkcd.com/908/)
:::

#### The idea

![](img/distributed.svg){fig-align="center"}

#### Criticism

::: {.r-fit-text .v-c}

It's not a cloud, it's just someone elses computer

:::
  
### Distributed Storage Summary

Pros:

* high availability
* scalability
* geographic distribution

Cons:

* complexity
* consistency
* network overhead

### Data Streaming

"... Datasets with an infinite amount of entries are known as streams. ..."

::: {.attribution}
[@1492046361]
:::

### Workflow

![](img/streaming-working-1.png)

::: {.attribution}
[@1492046361]
:::

### Kafka

![](img/streaming-kafka-apis-1.png)

::: {.attribution}
[@1492046361]
:::

### Data streaming summary

Pros:

* real-time insights
* scalability
* efficiency

Cons:

* complexity
* cost
* data consistency

### Log-files

* Record system events.
* Include timestamps, messages.
* Used for troubleshooting, monitoring.
* Essential in IT, software development.

#### log4j

![](https://imgs.xkcd.com/comics/dependency.png){fig-align="center"}

::: {.fragment .fade-in}

[log4j](https://www.bsi.bund.de/DE/Themen/Unternehmen-und-Organisationen/Informationen-und-Empfehlungen/Empfehlungen-nach-Angriffszielen/Webanwendungen/log4j/log4j_node.html)

:::

::: {.attribution}
[xkcd](https://xkcd.com/2347/)
:::

#### example log file {.scrollable}

```

 01 
03/22 08:51:01 INFO   :.main: *************** RSVP Agent started ***************
 02 
03/22 08:51:01 INFO   :...locate_configFile: Specified configuration file: /u/user10/rsvpd1.conf
03/22 08:51:01 INFO   :.main: Using log level 511
03/22 08:51:01 INFO   :..settcpimage: Get TCP images rc - EDC8112I Operation not supported on socket.
 03 
03/22 08:51:01 INFO   :..settcpimage: Associate with TCP/IP image name = TCPCS
03/22 08:51:02 INFO   :..reg_process: registering process with the system
03/22 08:51:02 INFO   :..reg_process: attempt OS/390 registration
03/22 08:51:02 INFO   :..reg_process: return from registration rc=0
 04 
03/22 08:51:06 TRACE  :...read_physical_netif: Home list entries returned = 7
03/22 08:51:06 INFO   :...read_physical_netif: index #0, interface VLINK1 has address 129.1.1.1, ifidx 0
03/22 08:51:06 INFO   :...read_physical_netif: index #1, interface TR1 has address 9.37.65.139, ifidx 1
03/22 08:51:06 INFO   :...read_physical_netif: index #2, interface LINK11 has address 9.67.100.1, ifidx 2
03/22 08:51:06 INFO   :...read_physical_netif: index #3, interface LINK12 has address 9.67.101.1, ifidx 3
03/22 08:51:06 INFO   :...read_physical_netif: index #4, interface CTCD0 has address 9.67.116.98, ifidx 4
03/22 08:51:06 INFO   :...read_physical_netif: index #5, interface CTCD2 has address 9.67.117.98, ifidx 5
03/22 08:51:06 INFO   :...read_physical_netif: index #6, interface LOOPBACK has address 127.0.0.1, ifidx 0
03/22 08:51:06 INFO   :....mailslot_create: creating mailslot for timer
03/22 08:51:06 INFO   :...mailbox_register: mailbox allocated for timer
 05 
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP via UDP
 06 
03/22 08:51:06 WARNING:.....mailslot_create: setsockopt(MCAST_ADD) failed - EDC8116I Address not available.
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp-udp
03/22 08:51:06 TRACE  :..entity_initialize: interface 129.1.1.1, entity for rsvp allocated and initialized
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP via UDP
03/22 08:51:06 WARNING:.....mailslot_create: setsockopt(MCAST_ADD) failed - EDC8116I Address not available.
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp-udp
03/22 08:51:06 TRACE  :..entity_initialize: interface 9.37.65.139, entity for rsvp allocated and 
initialized
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP via UDP
03/22 08:51:06 WARNING:.....mailslot_create: setsockopt(MCAST_ADD) failed - EDC8116I Address not available.
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp-udp
03/22 08:51:06 TRACE  :..entity_initialize: interface 9.67.100.1, entity for rsvp allocated and initialized
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP via UDP
03/22 08:51:06 WARNING:.....mailslot_create: setsockopt(MCAST_ADD) failed - EDC8116I Address not available.
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp-udp
03/22 08:51:06 TRACE  :..entity_initialize: interface 9.67.101.1, entity for rsvp allocated and initialized
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP via UDP
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp-udp
03/22 08:51:06 TRACE  :..entity_initialize: interface 9.67.116.98, entity for rsvp allocated and 
initialized
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp
03/22 08:51:06 INFO   :.....mailslot_create: creating mailslot for RSVP via UDP
03/22 08:51:06 INFO   :....mailbox_register: mailbox allocated for rsvp-udp
03/22 08:51:06 TRACE  :..entity_initialize: interface 9.67.117.98, entity for rsvp allocated and 
initialized

```

#### common log format 

[“The Common Log Format is a standardized text file format used by web servers when generating server log files.”](https://en.wikipedia.org/wiki/Common_Log_Format)

#### commong log format example {.smaller}

```
pd9049dac.dip.t-dialin.net - - [01/May/2001:01:51:25 -0700] "GET /accesswatch/accesswatch-1.33/ HTTP/1.0" 200 1004

```

* A `"-"` in a field indicates missing data.
* `pd9049dac.dip.t-dialin.net` is the IP address of the client (remote host) which made the request to the server.
* `[01/May/2001:01:51:25 -0700]` is the date, time, and time zone that the request was received, by default in strftime format `%d/%b/%Y:%H:%M:%S %z`.
* `"GET /accesswatch/accesswatch-1.33/ HTTP/1.0"` is the request line from the client.
* The method `GET, /accesswatch/accesswatch-1.33/` is the resource requested, and `HTTP/1.0` is the HTTP protocol.
* `200` is the HTTP status code returned to the client.
* `2xx` is a successful response
* `3xx` a redirection
* `4xx` a client error, and
* `5xx` a server error
* `1004` is the size of the object returned to the client, measured in bytes

#### analyising a log file

```{r}
#| echo: true
#| output: true

logs <- readLines("https://raw.githubusercontent.com/mechtrix/BigData_online/refs/heads/main/data/logfile.txt")
head(logs)

```

#### how many requests involved an image file?

```{r}
#| echo: true
#| output: true


# subset a sample of lines
set.seed(98765)
s <- sample(1:length(logs), size = 50)
sublogs <- logs[s]
```

---

```{r}
#| echo: true
#| output: true


# matching "jpg" (which lements)
grep("jpg", sublogs)
```

---

```{r}
#| echo: true
#| output: true


grep("jpg", sublogs, value = TRUE)
```

---

```{r}
#| echo: true
#| output: true

grep("\\.jpg ", sublogs, value = TRUE)
```

---

```{r}
#| echo: true
#| output: true


str_detect(string = sublogs, pattern = "\\.jpg")

```

---

```{r}
#| echo: true
#| output: true

str_detect(string = sublogs, pattern = "\\.png")

```

---

```{r}
#| echo: true
#| output: true


# looking for image file extensions
jpgs <- str_detect(logs, pattern = "\\.jpg ")
sum(jpgs)

pngs <- str_detect(logs, pattern = "\\.png ")
sum(pngs)

gifs <- str_detect(logs, pattern = "\\.gif")
sum(gifs)

icos <- str_detect(logs, pattern = "\\.ico ")
sum(icos)

```

---

```{r}
#| echo: true
#| output: true


img_extensions <- str_extract(logs, "\\.(jpg|png|gif|ico)")

```

---

```{r}

img_extensions_df <- img_extensions %>% table() %>% as.data.frame() %>% janitor::clean_names() 

img_extensions_df %>% 
  ggplot(
    aes(
      x = reorder(x,freq),
      y = freq
    )
  )+
  geom_col()+
  labs(
    x = "img ext",
    y = "count",
    title = "image extension requests"
  )+
  scale_y_continuous(
    expand = c(0,0,0.05,0)
  )+
  theme_bw()


```

---

::: {.r-fit-text .v-c}

It's a mess!

:::

#### H4

{{< include img/_mqtt_anim.qmd >}}

# References
